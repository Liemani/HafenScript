<<PBotCharacterAPI>>
void					.cancelAct()
void					.doAct(string act) // send act message to server : dig, mine, carry, destroy, fish, inspect, repair, crime, swim, tracking, aggro, shoot
int						.getEnergy()
int						.getShp()
int						.getStamina()
void					.logoutChar()
void					.msgToChat(string chatName, string msg) // send message to a given chat



<<PBotCheckbox>>
boolean					.getValue()
void					.setValue(boolean val)



<<PBotGob>>
void					.addGobText(string text, int height)
void					.doClick(int button, int mod) // button: 1-left, 3-right, mod: 0-nothing, 1-shift, 2-ctrl, 4-alt
int						.GetCropStage()
long					.getGobId()
[string]				.getPoses()
haven.Coord2d			.getRcCoords()
string					.getResname()
void					.highlightGob() // 조까 이거 작동 안함
boolean					.isMoving()
void					.itemClick(int mod) // mod: 0-nothing, 1-shift, 2-ctrl, 4-alt
void					.itemClickAll() // shift + itemact until all similar items from the inventory have been clicked
void					.pfClick(int btn, int mod) // button: 1-left, 3-right, mod: 0-nothing, 1-shift, 2-ctrl, 4-alt
boolean					.stockpileIsFull() // check if stockpile is stockpile is full
string					.windowNameForGob(haven.Gob gob) // get name of window for gob from gobWindowMap



<<PBotGobAPI>>
PBotGob					.findGobById(long id) // find object by ID
PBotGob					.findGobByNames(double radius, string... names) // gobName.same(names[i])
[PBotGob]				.getAllGobs() // list of all gobs visible to the client
PBotGob					.getGobWithCoords(haven.Coord2d c) // return gob with exactly the given coords or null if not found
	// 정확한 위치가 정한 위치 위에 바운딩 박스가 생기는 것을 말하는건지
	// 아니면 곱의 위치가 x, y 일치하는 곱을 출력하는건지
void					.makePile() // itemact for stockpile
void					.placeThing(double x, double y) // use to place stockpile
PBotGob					.player()
PBotGob					.selectGob() // print next alt+clicked gob
void					.waitForGob(double x, double y) // wait for any gob to appear at the precisely given coordinates, excluding player
	// 정확한 위치가 정한 위치 위에 바운딩 박스가 생기는 것을 말하는건지
	// 아니면 곱의 위치가 x, y 일치하는 곱이 생기는걸 기다리는건지



<<PBotInventory>>
int[][]					.containerMatrix()
void					.dropItemToInventory(haven.Coord coord) // drop hand item to given inventory slot
int						.freeSlotsInv()
haven.Coord				.freeSpaceForItem(PBotItem itm)
[PBotItem]				.getInventoryContents() // all items
[PBotItem]				.getInventoryItemsByNames([string] names)
	// 정확한 이름을 가진 아이템만을 찾아서 인식하는지, 문장을 포함하는 아이템도 인식하는지
[PBotItem]				.getInventoryItemsByResnames([string] resnames)
	// 정확한 리소스 이름만을 체크한다
PBotItem				.getItemFromInventoryAtLocation(int xLoc, int yLoc)
	// 여러칸 차지하는 아이템에 대해 첫칸을 제외한 칸에 적용하면 오류가 난다
	// 클라이언트 언어에 따라 다른 값을 리턴한다



<<PBotItem>>
void					.activateItem()
boolean					.canDrinkFrom()
void					.dropItemFromInventory()
int						.getAmount() // like seeds in a stack
haven.ItemInfo.Contents	.getContents()
string					.getName() // returns name if it exists or null
	// 한글이면 한글로 나오는지
double					.getQuality()
string					.getResname()
void					.itemact(int mod) // mod: 0-nothing, 1-shift
void					.takeItem() // wait appering item at hand 손에 아이템 뜨는걸 기다린다
									// 조까 이거 슬립 넣어야함
void					.transferItem()



<<PBotUtils>>
void					.areaSelect(haven.Coord a, haven.Coord b) // callback for area select
boolean					.choosePetal(string name)
	// 정확한 스트링?
void					.closeFlowermenu() // waits for the flower menu to disappear
void					.craftItem(string name, int makeAll) // start crafting item the given name
	// 정확한 스트링?
boolean					.drink(boolean wait)
void					.dropItemFromHand(int mode) // waits until it has been dropped mod: 0-nothing, 1-shift, 2-ctrl, 4-alt
[PBotInventory]			.getAllInventories()
haven.Coord				.getCenterScreenCoord()
double					.getHourglass() // -1 = no hourglass, else the value between 0.0 and 1.0
PBotItem				.getItemAtHand()
haven.Coord				.getSelectedAreaA()
haven.Coord				.getSelectedAreaB()
[PBotGob]				.gobsInArea(haven.Coord a, haven.Coord b)
void					.mapClick(int x, int y, int btn, int mod) // btn: 1-lmb, 3-rmb, mod: 0-nothing, 1-shift, 2-ctrl, 4-alt
	// 물체 내려놓기가 가능한지
void					.mapInteractClick() // plant crop but not tree seed
void					.openCraftingWnd(string name)
	// 정확한 스트링?
PBotWindow				.PBotWindow(string title, int height, int width, string id)
boolean					.pfLeftClick(double x, double y)
boolean					.pfRightClick(PBotGob gob, int mod) // mod: 0-nothing, 1-shift, 2-ctrl, 4-alt
PBotInventory			.playerInventory()
void					.selectArea()
PBotItem				.selectItem()
void					.sleep(int t)
void					.sysMsg(string str)
void					.sysMsg(string str, java.awt.Color col)
void					.sysMsg(string str, int r, int g, int b)
string					.tileeResnameAt(int x, int y)
void					.waitFlowermenuclose()
void					.waitForFlowerMenu()
void					.waitForHourglass()
boolean					.waitForHourglass(int timeout) // if hourglass does not appear within timeout, returns false, else true



<<PBotWindow>>
PBotButton				.addButton(string name, string label, int width, int x, int y)
PBotCheckbox				.addCheckbox(string name, string label, boolean initialState, int x, int y)
PBotLabel				.addLabel(string text, int x, inty)
PBotTextEntry				.addTextEntry(int width, string initialText, int x, int y)
boolean					.closed()
void					.closeWindow()
void					.wdgmsg(haven.Widged sender, string msg, Object... args)



<<PBotWindowAPI>>
void					.closeWindow(haven.Window window)
int					.getAmount(haven.Window window) // get amount at a meter of the window, from 0 to 100, i.e. trough
PBotInventory				.getInventory(haven.Window window)
int					.getStockpileTotalCapacity()
int					.getStockpileUsedCapacity()
haven.Window				.getWindow(string name)
void					.putItemFromHandToStockpile()
	// 행동을 기다리는지
void					.putItemFromInventoryToStockpile(int count) // like when scrolling to stockpile
void					.takeItemsFromStockpile(int count)
void					.waitForWindow(string windowName) // wait for a window with a specific name to appear
void					.waitForWindowClose(string windowName) // wait for a window with a specific name to disappear






character api - 캐릭터 상태 데이터 리턴

PBotUtils.mapClick() : 완료되는걸 기다리지 않는다



손에 아이템이 있다면 스톡파일을 쉬프트 우클릭 하는건 어떨까?

findingGobNames는 contain
빼고는 다 정확히 똑같아야함







동물 gfx/kritter/boar/boar
자세 [gfx/kritter/boar/knock] // 녹된 동물만

동물에서 나오는 아이템

가죽 - 가죽 스톡파일 			hide
창자, 내장 -> 쓰레기 스톡파일	intestines, entrails
뼈, 특수뼈 -> 뼈 스톡파일		bone, 각종
고기, 지방, 서클링 모우, 특수 아이템 -> 컨테이너

가죽				gfx/invobjs/boarhide-blood		gfx/terobjs/items/horsehide-blood	// 스톡파일

창자				gfx/invobjs/intestines			gfx/terobjs/items/intestines		// 스톡파일
내장				gfx/invobjs/entrails			gfx/terobjs/items/entrails			// 스톡파일

뼈					gfx/invobjs/bone				gfx/terobjs/items/bone				// 스톡파일
특수뼈				gfx/invobjs/boartusk												// 스톡파일

고기				gfx/invobjs/meat				gfx/terobjs/items/trollmeat			gfx/terobjs/items/meat
지방				gfx/invobjs/animalfat			gfx/terobjs/items/animalfat

서클링 모우			gfx/invobjs/suckmaw				gfx/terobjs/items/suckmaw

파인 본
Ant Chitin			gfx/invobjs/antchitin			gfx/terobjs/items/antchitin
Bear Tooth			gfx/invobjs/beartooth			gfx/terobjs/items/beartooth
Billygoat Horn		gfx/invobjs/billygoathorn		gfx/terobjs/items/billygoathorn
Boar Tusk			gfx/invobjs/boartusk			gfx/terobjs/items/boartusk
Boreworm Beak		gfx/invobjs/borewormbeak		gfx/terobjs/items/borewormbeak
Cachalot Bone		gfx/invobjs/whalebone			gfx/terobjs/items/whalebone
Cachalot Tooth		gfx/invobjs/spermwhaletooth		gfx/terobjs/items/spermwhaletooth
Cave Louse Chitin	gfx/invobjs/cavelousechitin		gfx/terobjs/items/cavelousechitin
Flipper Bones		gfx/invobjs/flipperbone			gfx/terobjs/items/flipperbone
Lynx Claws			gfx/invobjs/lynxclaws			gfx/terobjs/items/lynxclaws
Mammoth Tusk		gfx/invobjs/mammothtusk			gfx/terobjs/items/mammothtusk
Moose Antlers		gfx/invobjs/antlers-moose		gfx/terobjs/items/antlers-moose
Red Deer Antlers	gfx/invobjs/antlers-reddeer		gfx/terobjs/items/antlers-reddeer
Reindeer Antlers	gfx/invobjs/antlers-reindeer	gfx/terobjs/items/antlers-reindeer
Troll Skull			gfx/invobjs/trollskull			gfx/terobjs/items/trollskull
Troll Tusks
Trollbone			gfx/invobjs/trollbone			gfx/terobjs/items/trollbone
Walrus Tusk			gfx/invobjs/walrustusk			gfx/terobjs/items/walrustusk
Wildgoat Horn		gfx/invobjs/wildgoathorn		gfx/terobjs/items/wildgoathorn
Wolf's Claw			gfx/invobjs/wolfclaw			gfx/terobjs/items/wolfclaw

특수 아이템
Beaver Teeth		gfx/invobjs/beaverteeth			gfx/terobjs/items/beaverteeth
Beaver Tail			gfx/invobjs/beavertail			gfx/terobjs/items/beavertail
Beast Unborn		gfx/invobjs/foetus				gfx/terobjs/items/foetus
Cave Angler Light	gfx/invobjs/caveanglerlight		gfx/terobjs/items/caveanglerlight
Dark Heart
Fishy Eyeball		gfx/invobjs/fishyeyeball		gfx/terobjs/items/fishyeyeball
Grotesque Tumor		gfx/invobjs/grotesquetumor		gfx/terobjs/items/grotesquetumor
Horrid Love Dart
Scent Gland
Hvalraf				gfx/invobjs/spermaceti			gfx/terobjs/items/spermaceti

가죽 아이템
Fresh Horse Hide	gfx/invobjs/horsehide-blood		gfx/terobjs/items/horsehide-blood
Fresh Goat Hide		gfx/invobjs/goathide-blood		gfx/terobjs/items/goathide-blood




심장				gfx/kritter/spermwhale/spermwhaleheart
고기				gfx/kritter/spermwhale/spermwhalesteak
머리				gfx/kritter/spermwhale/spermwhaleskull
몸뼈				gfx/kritter/spermwhale/spermwhaleskeleton

흰비버				gfx/kritter/beaver/oldbeaver
왕비버				gfx/kritter/beaver/beaverking














// 기억부
동물을 기억한다 - kritter이면서 knock
스톡파일할 영역을 기억한다
아이템을 넣을 컨테이너가 있는 영역을 기억한다
리소스 이름 : gfx/kritter/horse/stallion
[22:17] 포즈들 리소스 이름 : [gfx/kritter/horse/knock]
말 기절도 knock


// 작동부(반복 곱이 전부 없을 때까지)
두와일{
	지금 곱이 없으면 곱을 하나 가져온다

	동물을 우클릭한다
	ㅊㅊㅊ모래시계가 끝나길 기다린다
	만약(곱이 이) {

	}
	바닥에 가장 가까운 아이템을 기억해둔다
	지금 손에 아이템이 있으면 아이템 종류에 따른 적절한 행동을 한다
	인벤토리의 아이템을 종류별로 정리한다
	아직 곱이 남아있다면 곱이 사라지거나 손이 꽉 찰때까지 다시 반복한다
	손이 꽉차면 다시 정리한다
}


























반복한다 {
	반복한다 {
		채집한다 실패했는가 {
			대상 탐색 성공했는가 {
				continue
			} 실패했는가 {
				인벤토리에 아이템이 있는가 {
					break
				} 없는가 {
					return
				}
			}
		}

		손에 아이템이 있는가 {
			break
		}
	}

	정리를 반복한다 {
		떨어진 아이템이 있으면 {
			기억한다
		} 없으면 {
			만약 대상이 있으면 {
				break
			} 없으면 {

			}
		}

		손에 있는 아이템을 정리한다 {
			스톡파일이 가능한 아이템인가 {
				자리가 있는 스톡파일이 존재하는가 {
					스톡파일에 넣는다
					스톡파일 정리()
				} 아니면 {
					스톡파일을 만들 수 있는가 {
						새로운 스톡파일을 만든다
					} 아니면 프로그램을 종료한다
				}
			} 아니면 {
				자리가 있는 컨테이너가 존재하는가 {
					컨테이너에 넣는다
					컨테이너 정리()
				} 아니면 프로그램을 종료한다
			}
		}

		인벤토리에 있는 아이템을 정리한다 {
			반복 (가죽, 쓰레기, 뼈) {
				스톡파일이 가능한 아이템인가 {
					자리가 있는 스톡파일이 존재하는가 {
						스톡파일에 넣는다
						스톡파일 정리()
						아직 아이템이 남아있다면 {
							스톡파일을 만들 수 있는가 {
								새로운 스톡파일을 만든다
							} 아니면 프로그램을 종료한다
						}
					}
				}
			}

			인벤토리에 아이템이 있으면 반복 {
				빈 컨테이너에 넣는다
				컨테이너 정리()
			}
		}

		기억한 떨어진 아이템이 있으면 반복한다 {
			기억한 떨어진 아이템을 줍는다
			줍는걸 기다린다
			떨어진 아이템을 기억한다
		}

		만약 손이 꽉 찼으면 {
			떨어진 아이템을 기억한다
			인벤토리 아이템을 정리한다
			떨어진 아이템
		}
	}
}


스톡파일에 아이템을 넣은 후 정리() {
	스톡파일이 가득 찼다면 null로 만든다
}

컨테이너에 아이템을 넣은 후 정리() {
	만약 컨테이너가 가득 찼으면{
		새로운 컨테이너를 가져온다
		만약 새로운 컨테이너가 없으면 프로그램을 종료한다
	}
}




손이 다차거나 다음 대상이 없을 때까지 채집
아이템 정리

다음 프로젝트
모든 나무로부터 나무 껍질, 나무 열매, 잎, 등 모든 아이템을 얻고 이를 정리하는 프로그램을
treeRipper

컨테이너는 15 이하의 거리에 있는것만 열린다
스톡파일을 가져다 쓰는건 테두리에서 15 이하..?
아니면 중심으로부터 20.. 은 아니고 보드가 더 멀리 있는것까지 쓰는거보면
1. 중심으로부터의 거리, 스톡파일과 건축물의 바운딩 박스를 고려
2. 스톡파일과 건축물의 테두리사이 거리

슬립으로 기다려야하는 부분
모래시계
맵클릭 후 이동하는지







element - 내가 정리 한다
atom - 이미 정의되어 있다




// MARK: - 엘리멘트 클레스
//
class ElementOfItem {
	constructor(
		name,
		resourceName
	) {
		this.name = name
		this.resourceName = resourceName
	}
}

class ElementOfGob {
	constructor(
		name,
		resourceName
	) {
		this.name = name
		this.resourceName = resourceName
	}
}




// MARK: - 카테고리 딕셔너리
// key와 name은 툴팁 이름 기준으로
//
const dream = {
	aBeautifulDream: new ElementOfItem(
		"A Beautiful Dream"
		"gfx/invobjs/dream",
		)
}

const dreamCatcher = {
	dreamCatcher: new ElementOfGob(
		"Dream Chatcher",
		"gfx/terobjs/dreca"
		)
}

const container = {
	birchbarkBasket: new ElementOfGob(
		"Birchbark Basket",
		"gfx/terobjs/birchbasket"
		),
	boneChest: new ElementOfGob(
		"Bone Chest",
		"gfx/terobjs/bonechest"
		),
	coffer: new ElementOfGob(
		"Coffer",
		"gfx/terobjs/coffer"
		),
	crate: new ElementOfGob(
		"Crate",
		"gfx/terobjs/crate"
		),
	cupboard: new ElementOfGob(
		"Cupboard",
		"gfx/terobjs/cupboard"
		),
	exquisiteChest: new ElementOfGob(
		"Exquisite Chest",
		"gfx/terobjs/exquisitechest"
		),
	largeChest: new ElementOfGob(
		"Large Chest",
		"gfx/terobjs/largechest"
		),
	linenCrate: new ElementOfGob(
		"Linen Crate",
		"gfx/terobjs/linencrate"
		),
	metalCabinet: new ElementOfGob(
		"Metal Cabinet",
		"gfx/terobjs/metalcabinet"
		),
	stoneCasket: new ElementOfGob(
		"Stone Casket",
		"gfx/terobjs/stonecasket"
		),
	strawBasket: new ElementOfGob(
		"Straw Basket",
		"gfx/terobjs/strawbasket"
		),
	wickerBasket: new ElementOfGob(
		"Wicker Basket",
		"gfx/terobjs/wbasket"
		),
	woodenBox: new ElementOfGob(
		"Wooden Box",
		"gfx/terobjs/woodbox"
		),
	woodenChest: new ElementOfGob(
		"Wooden Chest",
		"gfx/terobjs/chest"
		)
}


안쓴 함수



// 목표 아이템의 수가 기대하는 값과 다르면 계속해서 0.5초 sleep하는 함수
// input    : (int amountOfTargetItemExpectToBeInPlayerInventory)
// output   : string errorMessage
//
function sleepUntilPutTargetItems(amountOfTargetItemExpectToBeInPlayerInventory) {
	do {
		if(window.closed()) {
			return windowClosedMessage
		}

		PBotUtils.sleep(500)
	} while(targetItemsInPlayerInventory().length != amountOfTargetItemExpectToBeInPlayerInventory)
}

PBotGob은 class가 아니라 structure이다