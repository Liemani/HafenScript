//********************************************
const title = "BasicLayout_0.1"
// made by Lieman
//
// short description:
// short description
//********************************************





// index

// declaration
// all global constant and variable of total program
// main function
// extension





// declaration
const PBotUtils = Java.type("haven.purus.pbot.PBotUtils")
const PBotGobAPI = Java.type("haven.purus.pbot.PBotGobAPI")

// 하나의 작은 단위가 아니라 이 프로그램 전체를 담당하기 때문에 모듈화를 하지는 않는다!
// 또한 모든 변수 및 상수는 'all global constant and variable of total program'에 정의한 것을 사용한다!
class ViewController {
    // window
    windowAppear() {
        this.windowWillAppear()

        const windowWidth = windowLeftMargin + buttonWidth + windowRightMargin
        const windowHeight = windowTopMargin + (buttonHeight * buttonNumber + buttonBottomMargin * (buttonNumber - 1)) + windowBottomMargin

        window = PBotUtils.PBotWindow(title, windowHeight, windowWidth, ScriptID)

        this.windowDidAppear()
    }

    windowWillAppear() {
        for(let index = 0; index < buttonNumber; index++) {
            const keyString = "button" + String(index)
            ViewController.prototype[keyString] = function() {
                pressedButton = index
                main()
            }
        }
    }

    windowDidAppear() {
        for(let index = 0; index < 4; index++) {
            const text = ""
            const xCoordinate = windowLeftMargin
            const yCoordinate = windowTopMargin + (labelHeight + labelBottomMargin) * index

            labelArray.push(window.addLabel(text, xCoordinate, yCoordinate))
        }
    }

    windowDisappear() {
        this.windowWillDisappear()
        this.windowDidDisappear()
    }

    windowWillDisappear() {}

    windowDidDisappear() {}

    // button
    buttonAppear() {
        this.buttonWillAppear()

        for(let index = 0; index < buttonNumber; index++) {
            const functionName = "viewController.button" + String(index)
            const text = buttonDataArray[index]
            const xCoordinate = windowLeftMargin
            const yCoordinate = windowTopMargin + (buttonHeight + buttonBottomMargin) * index

            buttonArray.push(window.addButton(functionName,
                                                text,
                                                buttonWidth,
                                                xCoordinate,
                                                yCoordinate))
        }

        this.buttonDidAppear()
    }

    buttonWillAppear() {}

    buttonDidAppear() {}

    buttonDisappear() {
        this.buttonWillDisappear()

        while(buttonArray.length != 0) {
            buttonArray.pop().destroy()
        }

        this.buttonDidDisappear()
    }

    buttonWillDisappear() {}

    buttonDidDisappear() {}

    // label
    labelAppear() {
        this.labelWillAppear()

        labelArray[0].setText("Status:")
        labelArray[1].setText("    " + this.status)


        this.labelDidAppear()
    }

    labelWillAppear() {}

    labelDidAppear() {}

    labelDisappear() {
        this.labelWillDisappear()

        labelArray.forEach(element => element.setText(""))

        this.labelDidDisappear()
    }

    labelWillDisappear() {}

    labelDidDisappear() {}

    // status
    get status() {
        return this._status
    }

    set status(newValue) {
        this._status = newValue
        if(newValue != Status.waiting) this.labelAppear()
    }

    // information
    start() {
        print(cuttingLine)
        print("[" + buttonDataArray[pressedButton] + " 시작!]")
    }

    end() {
        print(this.status)
        print("[" + buttonDataArray[pressedButton] + " 종료!]")
    }
}





// all global constant and variable of total program
const cuttingLine = "ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ"

const buttonDataArray = [
    "buttonName0",
    "buttonName1",
    "buttonName2",
]

const windowTopMargin = 0
const windowLeftMargin = 5
const windowRightMargin = 5
const windowBottomMargin = 10

const buttonWidth = 140
const buttonHeight = 20

const buttonTopMargin = 0
const buttonLeftMargin = 0
const buttonRightMargin = 0
const buttonBottomMargin = 15

const labelWidth = 140
const labelHeight = 10

const labelTopMargin = 0
const labelLeftMargin = 0
const labelRightMargin = 0
const labelBottomMargin = 10

const buttonNumber = buttonDataArray.length

let viewController = null
let window = null
let buttonArray = []
let labelArray = []
let pressedButton = null

const Status = {
    loading: "window will appear",
    operating: "operating",
    waiting: "waiting",
    testing: "testing",
    windowClosed: "창을 닫아서 매크로를 종료합니다!",
    noLogFound: "통나무가 없어요!",
    finishedSuccessfully: "맡은 일을 다 끝냈어요!",
}





// main function
program()

function program() {
    viewController = new ViewController()

    viewController.windowAppear()
    viewController.buttonAppear()
}

function main() {
    viewController.status = Status.operating

    viewController.buttonDisappear()
    viewController.labelAppear()

    viewController.start()

    mainProcess()

    if(window.closed()) {
        viewController.status = Status.windowClosed
    } else {
        viewController.status = Status.finishedSuccessfully
    }

    viewController.end()

    viewController.labelDisappear()
    viewController.buttonAppear()

    viewController.status = Status.waiting
}

function mainProcess() {

    mainLoop()
}

function mainLoop() {
    while(true) {
        print(Character.inventory.countItem())

        if(true) return
    }
}





// extension
class Character {
    static get inventory() {
        return new Inventory(PBotUtils.playerInventory())
    }
}

class Inventory {
    constructor(inventory) {
        this.self = inventory
    }

    countItem(string) {
        let contents = this.self.getInventoryContents()
        lmtFilter(contents, string)
        return contents.length
    }
}

function lmtFilter(arrayList, string) {
    if(string == null || string == "") return
    arrayList.removeIf(element => !element.includes(string))
}

function print(thing) {
    PBotUtils.sysMsg(String(thing))
}

function sleep(millisecond) {
    PBotUtils.sleep(millisecond)
}

function gob(description) {
    print(description)
    let gob = PBotGobAPI.selectGob()
}

function gobs(name, description) {
    print(description)

	PBotUtils.selectArea()

    const searchingAreaA = PBotUtils.getSelectedAreaA()
    const searchingAreaB = PBotUtils.getSelectedAreaB()

	let gobs = javaListToArray(PBotUtils.gobsInArea(searchingAreaA, searchingAreaB))

	lmtFilter(gobs, name)

	return gobs
}