// LogCollocater
// Digs a cellar
// Made by Purus Cor to demonstrate usage of PBot API
// For more information about API, join Purus Pasta discord
// To suggest features into API, suggest them in discord

const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const window = PBotUtils.PBotWindow("통나무 차곡차곡 정리  ", 70, 275, ScriptID);

const btn = window.addButton("btnClick", "Start", 180, 5, 5)

const selectLogAreaMessage = "정리할 통나무가 있는 영역을 지정해주세요."
const selectCollocateAreaMessage = "통나무를 정리해 내려놓을 빈영역을 지정해주세요."



// class 구현부
class Point {
    constructor(
        x,
        y
    ) {
        this.x = x
        this.y = y
    }

    set(x, y) {
        this.x = x
        this.y = y
    }
}

class Range {
    constructor(
        coordinate1,
        coordinate2
    ) {
        this.coordinate1 = coordinate1
        this.coordinate2 = coordinate2
    }

    set(1x, x2) {
        this.x1 = x1
        this.x2 = x2
    }
}

class SizeOfGob {
    constructor(
        width,
        height
    ) {
        this.width = width
        this.height = height
    }
}



// const 구현부
const gob = {
    log: {
        size: new SizeOfGob(19.25, 4.125),
        partsOfResourceNameOfGob: ["log"]
    },
    stockpileOfWoodBlock: new SizeOfGob(11, 11),
    stockpileOfBoard: new SizeOfGob(16.5, 16.5)
}



// function 구현부
//
// input    : ([string] partsOfResourceNameOfGob, haven.coord searchingLocationA, have.coord searchingLocationB)
// outgpu   : [PBotGob] gobsContainsAtLeastOneOfName
function gobsContainsAtLeastOneOf(partsOfResourceNameOfGob, searchingLocationA, searchingLocationB) {
	const gobsAtSelectedArea = javaListToArray(PBotUtils.gobsInArea(searchingLocationA, searchingLocationB))
    
	let gobsContainsAtLeastOneOf = gobsAtSelectedArea.filter(
		(gob) => {
			let containsAtLeastOneOfNames

			for(let i = 0; i < partsOfResourceNameOfGob.length; i++) {
				containsAtLeastOneOfNames = containsAtLeastOneOfNames || gob.getResname().contains(partsOfResourceNameOfGob[i])

                if(containsAtLeastOneOfNames) {
                    break
                }
			}

			return containsAtLeastOneOfNames
		}
	)

	return gobsContainsAtLeastOneOf
}

// lengthOfASideOfAStockpile에 따라
// input	: (SizeOfGob sizeOfGob, boolean isHorizontal, boolean isForward)
// output	: [{x, y}] stockpilableLocations
function stockpilableLocations(sizeOfGob, isHorizontal, isForward) {
	const stockpilableLocations = []

    let startPoint = new Point()
    let endPoint = new Point()

    let xRange
    let yRange

    let widthOfGob
    let heightOfGob

	PBotUtils.selectArea()

	const northWestPoint = PBotUtils.getSelectedAreaA()
	const southEastPoint = PBotUtils.getSelectedAreaB()

    initialXRange = new Range(northWestPoint.x, southEastPoint.x)
    initialYRange = new Range(northWestPoint.y, southEastPoint.y)

    if(isHorizontal) {
        if(isForward) {
            xRange.set(initialXRange.coordinate1, initialXRange.coordinate2)
            YRange.set(initialYRange.coordinate1, initialYRange.coordinate2)

            startPoint.set(xVector.x1, northWestPoint.y)
            endPoint.set(southEastPoint.x, southEastPoint.y)

            widthOfGob = sizeOfGob.height
            heightOfGob = sizeOfGob.width
        } else {
            startPoint.set(southEastPoint.x, )
            endPoint.set(, )

            widthOfGob = 
            heightOfGob = 
        }
    } else {
        if(isForward) {
            startPoint.set(, )
            endPoint.set(, )

            widthOfGob = 
            heightOfGob = 
        } else {
            startPoint.set(, )
            endPoint.set(, )

            widthOfGob = 
            heightOfGob = 
        }
    }

    const xStart = isForward ? northWestPoint.x : southEastPoint.x
    const xFinish
    const yStart = isForward ? northWestPoint.y : southEastPoint.y

    if(isForward) {

    }


	for(let yCoordinate = northWestPoint.y + lengthOfASideOfAStockpile / 2; yCoordinate <= southEastPoint.y - lengthOfASideOfAStockpile / 2; yCoordinate += lengthOfASideOfAStockpile) {
		for(let xCoordinate = northWestPoint.x + lengthOfASideOfAStockpile / 2; xCoordinate <= southEastPoint.x - lengthOfASideOfAStockpile / 2; xCoordinate += lengthOfASideOfAStockpile) {
			stockpilableLocations.push({x: xCoordinate, y: yCoordinate})
		}
	}

	return stockpilableLocations
}



function btnClick() {

	PBotUtils.sysMsg(selectLogAreaMessage)
	
	PBotUtils.selectArea()
    const logGobs = gobsContainsAtLeastOneOf(gob.log.partsOfResourceNameOfGob, PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB())

	PBotUtils.sysMsg(selectCollocateAreaMessage)
	
	PBotUtils.selectArea()
    let logGobs = gobsContainsAtLeastOneOf(gob.log.partsOfResourceNameOfGob, PBotUtils.getSelectedAreaA(), PBotUtils.getSelectedAreaB())








    logGobs.forEach((logGob) => {
        logGob.pfClick(1, 0)
        PBotCharacterAPI.doAct("carry");
        logGob.doClick(3, 0)
        PBotCharacterAPI.cancelAct();
    })






	const cellar = PBotGobAPI.findGobByNames(1000, ["gfx/terobjs/arch/cellardoor"]);
	btn.destroy();
	if(cellar == null) {
		PBotUtils.sysMsg("Couldn't find a cellar door!");
		return;
	}
	PBotUtils.sysMsg("Starting to dig the cellar!");
	const boulderPos = PBotGobAPI.player().getRcCoords().floor();
	while(!stop) {
		if(shouldStop()) return;
			
		cellar.doClick(3, 0);
		
		while(PBotUtils.getHourglass() == -1) {
			if(PBotGobAPI.findGobByNames(1000, ["gfx/terobjs/arch/cellardoor"]) == null) {
				stop = true;
				break;
			}
			if(shouldStop()) return;
			PBotUtils.sleep(25);
		}

		if(stop) break;
		
		PBotUtils.waitForHourglass();
		PBotUtils.mapClick(boulderPos.x, boulderPos.y, 3, 0);
		// wait for player to start moving, then for player to stop
		while(!PBotGobAPI.player().isMoving())
			PBotUtils.sleep(25);
		while(PBotGobAPI.player().isMoving())
			PBotUtils.sleep(25);
		
		let boulder;
		while(true) {
		if(shouldStop()) return;
			boulder = PBotGobAPI.findGobByNames(1000, ["bumling"]);
			if(boulder != null && !PBotGobAPI.player().getRcCoords().equals(boulder.getRcCoords()))
				break;
			PBotUtils.sleep(25);
		}
		boulder.doClick(3, 0);
		PBotUtils.waitForFlowerMenu();
		PBotUtils.choosePetal("Chip stone");
		PBotUtils.waitForHourglass();
		PBotUtils.dropItemFromHand(0);
	}
	PBotUtils.sysMsg("Finished digging the cellar!");
	window.closeWindow();
};

